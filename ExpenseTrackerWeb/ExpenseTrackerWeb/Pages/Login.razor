@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider

<FluentTextField @bind-Value="Email" Label="Email" Required="true" Placeholder="Enter your email" />
<FluentTextField @bind-Value="Password" Label="Password" Required="true" Type="password" Placeholder="Enter your password" />

<FluentButton class="btn-accent" @onclick="HandleLogin">Login</FluentButton>
<FluentButton class="btn-neutral" @onclick="NavigateToRegister">Register</FluentButton>

<p style="color:red;" hidden="!ShowError">@ErrorMessage</p>

@code {
    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string ErrorMessage { get; set; }
    private bool ShowError { get; set; } = false;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/account/login", new { Email, Password });
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();
                await LocalStorage.SetItemAsync("authToken", token);

                // Notify the AuthenticationStateProvider of the updated state
                if (AuthenticationStateProvider is TokenAuthenticationStateProvider customAuthProvider)
                {
                    customAuthProvider.MarkUserAsAuthenticated(token);
                }

                Navigation.NavigateTo("/");
            }
            else
            {
                ShowError = true;
                ErrorMessage = "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            ShowError = true;
            ErrorMessage = ex.Message;
        }
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }
}
